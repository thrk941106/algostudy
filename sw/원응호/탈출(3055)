#include<algorithm>
#include<cstdio>
#include<queue>
#include<string.h>
#include<tuple>
using namespace std;
int n, m;
char arr[50][50];
int check[50][50];
int check2[50][50];
int sx, sy, dx, dy;
void bfs() {
	queue<pair<int, int> > q;
	memset(check, -1, sizeof(check));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (arr[i][j] == '*') {
				q.push(make_pair(i, j));
				check[i][j] = 0;
			}
		}
	}
	int dx[] = { -1,0,0,1 };
	int dy[] = { 0,-1,1,0 };

	while (!q.empty()) {
		int px, py;
		tie(px, py) = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = px + dx[i];
			int ny = py + dy[i];
			if (0 <= nx && nx < n && 0 <= ny && ny < m && check[nx][ny] == -1 && (arr[nx][ny] == '.' || arr[nx][ny] == 'S')) {
				check[nx][ny] = check[px][py] + 1;
				q.push(make_pair(nx, ny));
			}
		}

	}
}
void bfs2() {
	queue<pair<int, int> > q;
	memset(check2, -1, sizeof(check2));
	check[dx][dy] = 200000;
	check2[sx][sy] = 0;
	q.push(make_pair(sx, sy));

	int dx[] = { -1,0,0,1 };
	int dy[] = { 0,-1,1,0 };

	while (!q.empty()) {
		int px, py;
		tie(px, py) = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = px + dx[i];
			int ny = py + dy[i];
			if (0 <= nx && nx < n && 0 <= ny && ny < m && check2[nx][ny] == -1 && arr[nx][ny] !='X' 
				&& (check[nx][ny] == -1 || check2[px][py] + 1 < check[nx][ny])) {
				check2[nx][ny] = check2[px][py] + 1;
				q.push(make_pair(nx, ny));
			}
		}

	}
}
int main()
{

	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf(" %1c", &arr[i][j]);
			if (arr[i][j] == 'S') {
				sx = i; sy = j;
			}
			if (arr[i][j] == 'D') {
				dx = i; dy = j;
			}
		}
	}
	bfs();
	bfs2();
	if (check2[dx][dy] == -1)
		printf("KAKTUS");
	else
		printf("%d", check2[dx][dy]);
}
