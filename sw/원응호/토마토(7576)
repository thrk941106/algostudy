#include<iostream>
#include<algorithm>
#include<queue>
using namespace std;
int m, n;
int result = -1;
int arr[1000][1000];
int check[1000][1000];
bool flag;
int maxx = -1;
queue<pair<int, int> >q;
vector<pair<int, int> >start;
void bfs(void) {
	int dx[] = { -1,0,0,1 };
	int dy[] = { 0,-1,1,0 };

	for (int i = 0; i < start.size(); i++) {
		q.push(start[i]);
		check[start[i].first][start[i].second]=1;
	}
	while(!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (0 <= nx && nx < n && 0 <= ny && ny < m && check[nx][ny]==0 && arr[nx][ny] == 0) {
				q.push(make_pair(nx, ny));
				check[nx][ny] = check[x][y]+1;
			}
		
		}
	}

}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);

	cin >> m >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 1)
				start.push_back(make_pair(i, j));
		}
	}
	bfs();
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (maxx < check[i][j])
				maxx = check[i][j];
			if (check[i][j] == 0&&arr[i][j]!=-1)
				flag = true;
		}
	}
	if (flag)
		cout << -1;
	else
		cout << maxx-1;

}
