#include<algorithm>
#include<cstdio>
#include<queue>
#include<string.h>
#include<tuple>
using namespace std;
int n, m;
int arr[1000][1000];
int check[1000][1000][2];
queue<tuple<int, int, int> > q;
void bfs() {
	check[0][0][0] = 1;
	q.push(make_tuple(0, 0, 0));
	int dx[] = { -1,0,0,1 };
	int dy[] = { 0,-1,1,0 };

	while (!q.empty()) {
		int px, py, pz;
		tie(px, py, pz)=q.front();

		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = px + dx[i];
			int ny = py + dy[i];
			if (0 <= nx && nx < n && 0 <= ny && ny < m) {
				if (pz == 0 && arr[nx][ny] == 0 && check[nx][ny][0]==0) {
					check[nx][ny][0] = check[px][py][0] + 1;
					q.push(make_tuple(nx, ny, 0));
				}

				if (pz == 0 && arr[nx][ny] == 1 && check[nx][ny][1]==0) {
					check[nx][ny][1] = check[px][py][0] + 1;
					q.push(make_tuple(nx, ny, 1));
				}
				if (pz == 1 && arr[nx][ny] == 0 && check[nx][ny][1]==0) {
					check[nx][ny][1] = check[px][py][1] + 1;
					q.push(make_tuple(nx, ny, 1));
				}
			}
		}

	}
}
int main()
{
	scanf("%d %d", &n, &m);
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%1d", &arr[i][j]);
		}
	}

	bfs();

	if (check[n - 1][m - 1][0] == 0 && check[n - 1][m - 1][1] == 0)
		printf("-1");
	else if (check[n - 1][m - 1][0] != 0 && check[n - 1][m - 1][1] == 0)
		printf("%d", check[n - 1][m - 1][0]);
	else if (check[n - 1][m - 1][0] == 0 && check[n - 1][m - 1][1] != 0)
		printf("%d", check[n - 1][m - 1][1]);
	else if (check[n - 1][m - 1][0] != 0 && check[n - 1][m - 1][1] != 0) {
		if (check[n - 1][m - 1][0] < check[n - 1][m - 1][1])
			printf("%d", check[n - 1][m - 1][0]);
		else
			printf("%d", check[n - 1][m - 1][1]);
	}
}
