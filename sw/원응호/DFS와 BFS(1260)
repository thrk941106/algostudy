#include<iostream>
#include<vector>
#include<queue>
#include<algorithm>
#include<string.h>
using namespace std;
int n, m, start;
vector<int>v[1001];
queue<int> q;
vector<int>answer;
bool check[1001];

void dfs(int node) {
	check[node] = true;
	answer.push_back(node);
	
	for (int i = 0; i < v[node].size(); i++) {
		int next = v[node][i];
		if (check[next] == false) {
			dfs(next);
		}
	}

}

void bfs(int start) {
	check[start] = true;
	q.push(start);
	while (!q.empty()) {
		int node = q.front();
		answer.push_back(node);
		for (int i = 0; i < v[node].size(); i++) {
			int next = v[node][i];
			if (!check[next]) {
				q.push(next);
				check[next] = true;
			}
		}
		q.pop();
	}
}
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0); cout.tie(0);

	cin >> n >> m >> start;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		v[a].push_back(b);
		v[b].push_back(a);
	}
	for (int i = 1; i <= n; i++)
		sort(v[i].begin(), v[i].end());
	dfs(start); 
	for (int i = 0; i < answer.size(); i++) {
		cout << answer[i] << ' ';
	}cout << '\n';

	memset(check, false, sizeof(check));

	answer.clear();

	bfs(start);
	for (int i = 0; i < answer.size(); i++) {
		cout << answer[i] << ' ';
	}cout << '\n';

}
